@page "/"
@using web.Services
@using web.Services.Actions
@using web.ViewModels
@using Timer = System.Timers.Timer
@attribute [Authorize]

<div class="container">
    <input type="text" placeholder="Search" @oninput="InputChanged" />
</div>

<div class="card-deck">
    @if (Games != null)
    {
        @foreach (var game in Games)
        {
            <div class="card" width="width: 4em;">
                <div class="card-body">
                    <h3>@game.Name</h3>
                    <h4>@game.Platform</h4>
                    <h5>@($"{game.CompleteInBoxPrice:C}")</h5>
                    <h5>@($"{game.LoosePrice:C}")</h5>
                </div>
            </div>
        }
    }
</div>
@code
{
    [Inject]
    private GametroveApiService ApiService { get; set; }

    private string Term { get; set; }
    private IEnumerable<GameViewModel> Games { get; set; }
    private Timer _timer;

    protected void InputChanged(ChangeEventArgs args)
    {
        Term = (string)args.Value;

        if (_timer != null)
        {
            _timer.Enabled = false;
            _timer.Elapsed -= ExecuteSearch;
            _timer.Stop();
            _timer = null;
        }

        _timer = new Timer { Interval = 1000, AutoReset = false };
        _timer.Elapsed += ExecuteSearch;
        _timer.Start();
    }

    private void ExecuteSearch(object sender, EventArgs args)
    {
        InvokeAsync(async () =>
        {
            await DoSearch();
        });
    }

    protected async Task DoSearch()
    {
        _timer.Elapsed -= ExecuteSearch;
        _timer.Enabled = false;
        _timer.Stop();
        _timer = null;

        await InvokeAsync(async () =>
        {
            if (!string.IsNullOrEmpty(Term))
            {
                Games = await ApiService.ExecuteWithResultAsync<SearchGamesAction, IEnumerable<GameViewModel>>(
                    new SearchGamesAction(Term)).ConfigureAwait(true);
            }
            else
            {
                Games = null;
            }

            StateHasChanged();
        });
    }
}
